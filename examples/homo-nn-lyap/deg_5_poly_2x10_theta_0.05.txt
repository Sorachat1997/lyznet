Skipping solving Lyapunov equation: A is not Hurwitz.
System dynamics: x' =  Matrix([[-0.0999583385413567*x1*(x1**4 + 2*x1**2*x2**2 - x2**4) - 1.99750052078993*x2*(-x1**4 + 2*x1**2*x2**2 + x2**4)], [1.99750052078993*x1*(x1**4 + 2*x1**2*x2**2 - x2**4) - 0.0999583385413567*x2*(-x1**4 + 2*x1**2*x2**2 + x2**4)]])
Eigenvalues of linearization:  [0. 0.]
The linearization is inconclusive for stability analysis.
__________________________________________________
Learning neural Lyapunov function:
Training model...
Epoch 1 completed. Average epoch loss: 0.00027705. Max epoch loss: 0.030566                                                             
Epoch 2 completed. Average epoch loss: 5.3032e-05. Max epoch loss: 0.0001194                                                            
Epoch 3 completed. Average epoch loss: 3.1464e-05. Max epoch loss: 8.1592e-05                                                           
Epoch 4 completed. Average epoch loss: 1.5341e-05. Max epoch loss: 7.9246e-05                                                           
Epoch 5 completed. Average epoch loss: 1.5856e-06. Max epoch loss: 3.3329e-05                                                           
Epoch 6 completed. Average epoch loss: 0. Max epoch loss: 0                                                                             
Total training time: 98.23 seconds.
Model trained: results/deg_5_homo_poly_0.05_loss=Homo_Lyapunov_N=300000_epoch=20_layer=1_width=10_lr=0.001_net=Homo.pt
V =  ( - 0.311611 * (sqrt((pow(x1, 2) + pow(x2, 2))) * tanh((-1.06318199634552 + ((-0.16555748879909515 * x1) / sqrt((pow(x1, 2) + pow(x2, 2)))) + ((1.6772316694259644 * x2) / sqrt((pow(x1, 2) + pow(x2, 2))))))) - 0.28488561511039734 * (sqrt((pow(x1, 2) + pow(x2, 2))) * tanh((-0.2865164577960968 + ((-1.4370377063751221 * x1) / sqrt((pow(x1, 2) + pow(x2, 2)))) + ((0.215535968542099 * x2) / sqrt((pow(x1, 2) + pow(x2, 2))))))) + 0.41505721211433411 * (sqrt((pow(x1, 2) + pow(x2, 2))) * tanh((-0.21069143712520599 + ((-0.48732560873031616 * x1) / sqrt((pow(x1, 2) + pow(x2, 2)))) + ((0.44278478622436523 * x2) / sqrt((pow(x1, 2) + pow(x2, 2))))))) + 0.085320554673671722 * (sqrt((pow(x1, 2) + pow(x2, 2))) * tanh((0.0063887611031532288 + ((-0.26400911808013916 * x1) / sqrt((pow(x1, 2) + pow(x2, 2)))) + ((0.069387324154376984 * x2) / sqrt((pow(x1, 2) + pow(x2, 2))))))) + 0.0015626143431290984 * (sqrt((pow(x1, 2) + pow(x2, 2))) * tanh((0.02611989714205265 + ((-0.00020653773390222341 * x2) / sqrt((pow(x1, 2) + pow(x2, 2)))) + ((0.0038929798174649477 * x1) / sqrt((pow(x1, 2) + pow(x2, 2))))))) + 0.34249165654182434 * (sqrt((pow(x1, 2) + pow(x2, 2))) * tanh((0.041265025734901428 + ((-0.45288768410682678 * x1) / sqrt((pow(x1, 2) + pow(x2, 2)))) + ((0.5028577446937561 * x2) / sqrt((pow(x1, 2) + pow(x2, 2))))))) - 0.24878907203674316 * (sqrt((pow(x1, 2) + pow(x2, 2))) * tanh((0.58430826663970947 + ((-1.3486014604568481 * x2) / sqrt((pow(x1, 2) + pow(x2, 2)))) + ((-1.3120089769363403 * x1) / sqrt((pow(x1, 2) + pow(x2, 2))))))) - 0.3173573911190033 * (sqrt((pow(x1, 2) + pow(x2, 2))) * tanh((0.6070181131362915 + ((-1.0565648078918457 * x1) / sqrt((pow(x1, 2) + pow(x2, 2)))) + ((1.0991202592849731 * x2) / sqrt((pow(x1, 2) + pow(x2, 2))))))) + 0.49322113394737244 * (sqrt((pow(x1, 2) + pow(x2, 2))) * tanh((0.62502586841583252 + ((-0.63420647382736206 * x1) / sqrt((pow(x1, 2) + pow(x2, 2)))) + ((-0.036829080432653427 * x2) / sqrt((pow(x1, 2) + pow(x2, 2))))))) + 0.29073271155357361 * (sqrt((pow(x1, 2) + pow(x2, 2))) * tanh((0.63005673885345459 + ((-0.6557157039642334 * x1) / sqrt((pow(x1, 2) + pow(x2, 2)))) + ((0.003212199080735445 * x2) / sqrt((pow(x1, 2) + pow(x2, 2))))))) - 0.067917101085186005 * sqrt((pow(x1, 2) + pow(x2, 2))))
Global stability verified for homogeneous vector field!
Time taken for verifying Lyapunov function of deg_5_homo_poly_0.05: 0.7731890678405762 seconds.