Skipping solving Lyapunov equation: A is not Hurwitz.
System dynamics: x' =  Matrix([[-0.0799786683732683*x1*(x1**4 + 2*x1**2*x2**2 - x2**4) - 1.99840021332196*x2*(-x1**4 + 2*x1**2*x2**2 + x2**4)], [1.99840021332196*x1*(x1**4 + 2*x1**2*x2**2 - x2**4) - 0.0799786683732683*x2*(-x1**4 + 2*x1**2*x2**2 + x2**4)]])
Eigenvalues of linearization:  [0. 0.]
The linearization is inconclusive for stability analysis.
__________________________________________________
Learning neural Lyapunov function:
Training model...
Epoch 1 completed. Average epoch loss: 0.00028305. Max epoch loss: 0.030885                                                             
Epoch 2 completed. Average epoch loss: 6.8848e-05. Max epoch loss: 0.00013856                                                           
Epoch 3 completed. Average epoch loss: 5.0109e-05. Max epoch loss: 0.0001075                                                            
Epoch 4 completed. Average epoch loss: 4.0337e-05. Max epoch loss: 0.00012541                                                           
Epoch 5 completed. Average epoch loss: 2.4654e-05. Max epoch loss: 9.3704e-05                                                           
Epoch 6 completed. Average epoch loss: 3.2119e-06. Max epoch loss: 3.2147e-05                                                           
Epoch 7 completed. Average epoch loss: 3.4109e-13. Max epoch loss: 1.1252e-09                                                           
Total training time: 109.07 seconds.
Model trained: results/deg_5_homo_poly_0.04_loss=Homo_Lyapunov_N=300000_epoch=20_layer=1_width=10_lr=0.001_net=Homo.pt
V =  ( - 0.310488 * (sqrt((pow(x1, 2) + pow(x2, 2))) * tanh((-0.99808967113494873 + ((-0.16901865601539612 * x1) / sqrt((pow(x1, 2) + pow(x2, 2)))) + ((1.561606764793396 * x2) / sqrt((pow(x1, 2) + pow(x2, 2))))))) - 0.30413660407066345 * (sqrt((pow(x1, 2) + pow(x2, 2))) * tanh((-0.2522636353969574 + ((-1.4751347303390503 * x1) / sqrt((pow(x1, 2) + pow(x2, 2)))) + ((0.20273619890213013 * x2) / sqrt((pow(x1, 2) + pow(x2, 2))))))) + 0.42134618759155273 * (sqrt((pow(x1, 2) + pow(x2, 2))) * tanh((-0.18060077726840973 + ((-0.56078231334686279 * x1) / sqrt((pow(x1, 2) + pow(x2, 2)))) + ((0.48766478896141052 * x2) / sqrt((pow(x1, 2) + pow(x2, 2))))))) + 0.069646544754505157 * (sqrt((pow(x1, 2) + pow(x2, 2))) * tanh((-0.0040759346447885036 + ((-0.16109049320220947 * x1) / sqrt((pow(x1, 2) + pow(x2, 2)))) + ((-0.051142379641532898 * x2) / sqrt((pow(x1, 2) + pow(x2, 2))))))) + 1.2488347920225351e-06 * (sqrt((pow(x1, 2) + pow(x2, 2))) * tanh((8.9810437202686444e-06 + ((-4.1912574033631245e-07 * x1) / sqrt((pow(x1, 2) + pow(x2, 2)))) + ((2.6397624424134847e-06 * x2) / sqrt((pow(x1, 2) + pow(x2, 2))))))) + 0.35419860482215881 * (sqrt((pow(x1, 2) + pow(x2, 2))) * tanh((0.010800591669976711 + ((-0.55297845602035522 * x1) / sqrt((pow(x1, 2) + pow(x2, 2)))) + ((0.5591508150100708 * x2) / sqrt((pow(x1, 2) + pow(x2, 2))))))) - 0.30243846774101257 * (sqrt((pow(x1, 2) + pow(x2, 2))) * tanh((0.520180344581604 + ((-1.1756182909011841 * x1) / sqrt((pow(x1, 2) + pow(x2, 2)))) + ((1.2273956537246704 * x2) / sqrt((pow(x1, 2) + pow(x2, 2))))))) + 0.47689783573150635 * (sqrt((pow(x1, 2) + pow(x2, 2))) * tanh((0.64003592729568481 + ((-0.60982143878936768 * x1) / sqrt((pow(x1, 2) + pow(x2, 2)))) + ((-0.060758460313081741 * x2) / sqrt((pow(x1, 2) + pow(x2, 2))))))) - 0.22624789178371429 * (sqrt((pow(x1, 2) + pow(x2, 2))) * tanh((0.6407167911529541 + ((-1.4946448802947998 * x2) / sqrt((pow(x1, 2) + pow(x2, 2)))) + ((-1.4581725597381592 * x1) / sqrt((pow(x1, 2) + pow(x2, 2))))))) + 0.28230476379394531 * (sqrt((pow(x1, 2) + pow(x2, 2))) * tanh((0.6522754430770874 + ((-0.63973253965377808 * x1) / sqrt((pow(x1, 2) + pow(x2, 2)))) + ((-0.021036561578512192 * x2) / sqrt((pow(x1, 2) + pow(x2, 2))))))) - 0.080155320465564728 * sqrt((pow(x1, 2) + pow(x2, 2))))
Global stability verified for homogeneous vector field!
Time taken for verifying Lyapunov function of deg_5_homo_poly_0.04: 0.7682857513427734 seconds.